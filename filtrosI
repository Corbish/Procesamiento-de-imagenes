#include<stdio.h>
#include<stdlib.h>
#include<math.h>

#define SIZE1 181*217
#define SIZE1_P3 183*219
#define SIZE1_P5 185*221
#define SIZE1_P7 187*223

#define SIZE2 512*512
#define SIZE2_P3 514*514
#define SIZE2_P5 516*516
#define SIZE2_P7 518*518

/*Funciones*/
void padd_zero(int, int, int, unsigned char *, unsigned char *);
void f_lowpass(int, int, int, unsigned char *, unsigned char * );

void padd_zero_B(int, int, int, unsigned short *, unsigned short *);
void f_lowpass_B(int, int, int, unsigned short *, unsigned short * );


int main()
{

	/* punteros a archivos de entrada y salida */
	FILE *fpA;
	FILE *fpA3_out;
	FILE *fpA5_out;
	FILE *fpA7_out;

	FILE *fpB;
	FILE *fpB3_out;
	FILE *fpB5_out;
	FILE *fpB7_out;

	FILE *fpD;
	FILE *fpD3_out;
	FILE *fpD5_out;
	FILE *fpD7_out;



	/* definir un puntero a caracter */
	unsigned char *bufA; 
	unsigned char *bufA3_out;
	unsigned char *bufA5_out;
	unsigned char *bufA7_out;

	unsigned char *bufB; 
	unsigned char *bufB3_out;
	unsigned char *bufB5_out;
	unsigned char *bufB7_out;

	unsigned short *bufD;
	unsigned short *bufD3_out;
	unsigned short *bufD5_out;
	unsigned short *bufD7_out;

	unsigned char *b_padd_3;
	unsigned char *b_padd_5;
	unsigned char *b_padd_7;

	unsigned short *B_padd_3;
	unsigned short *B_padd_5;
	unsigned short *B_padd_7;

	/* Abrir archivo de entrada */
	if((fpA = fopen("ImagenA.raw","rb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open input file\n");
		exit(1);
	}

	if((fpB = fopen("ImagenB.raw","rb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open input file\n");
		exit(1);
	}

	if((fpD = fopen("img_ec.raw","rb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open input file\n");
		exit(1);
	}



	/* Reservar memoria para imagen de entrada*/
	/*Imagen A*/
	if((bufA = (unsigned char *)malloc(SIZE1)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufA3_out = (unsigned char *)malloc(SIZE1)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufA5_out = (unsigned char *)malloc(SIZE1)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufA7_out = (unsigned char *)malloc(SIZE1)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	/*Imagen B*/
	if((bufB = (unsigned char *)malloc(SIZE1)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufB3_out = (unsigned char *)malloc(SIZE1)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufB5_out = (unsigned char *)malloc(SIZE1)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufB7_out = (unsigned char *)malloc(SIZE1)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	/*Imagen D*/
	if((bufD = (unsigned short *)malloc(SIZE2*sizeof(short))) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufD3_out = (unsigned short *)malloc(SIZE2*sizeof(short))) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufD5_out = (unsigned short *)malloc(SIZE2*sizeof(short))) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((bufD7_out = (unsigned short *)malloc(SIZE2*sizeof(short))) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	/*Padding de 8 bits*/
	if((b_padd_3 = (unsigned char *)malloc(SIZE1_P3)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((b_padd_5 = (unsigned char *)malloc(SIZE1_P5)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((b_padd_7 = (unsigned char *)malloc(SIZE1_P7)) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	/*Padding de 16 bits*/
	if((B_padd_3 = (unsigned short *)malloc(SIZE2_P3*sizeof(short))) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((B_padd_5 = (unsigned short *)malloc(SIZE2_P5*sizeof(short))) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}

	if((B_padd_7 = (unsigned short *)malloc(SIZE2_P7*sizeof(short))) == NULL)
	{
		fprintf(stderr,"ERROR: can't allocate memory\n");
		exit(1);
	}


	/* Leer archivo de entrada*/
	if((fread(bufA,sizeof(char),SIZE1,fpA)) != SIZE1)
	{
		fprintf(stderr,"ERROR: can't read input file\n");
		exit(1);
	}
	fclose(fpA);

	if((fread(bufB,sizeof(char),SIZE1,fpB)) != SIZE1)
	{
		fprintf(stderr,"ERROR: can't read input file\n");
		exit(1);
	}
	fclose(fpB);

	if((fread(bufD,sizeof(short),SIZE2,fpD)) != SIZE2)
	{
		fprintf(stderr,"ERROR: can't read input file\n");
		exit(1);
	}
	fclose(fpD);



	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/*Función Padding 8 bits*/
	void padd_zero(int m, int n, int d, unsigned char *padd, unsigned char *img)
	{
		int t = (d-1)/2;
		for(int i=0; i<(m*n); i++)	//"aseguro que la matriz quede con valores 255"
		{
			padd[i]=255;
		}

		for (int i=0; i<(m*t); i++)		//las t primeras filas quedan en 0
		{
			padd[i] = 0;
		}

		int k = 0;
		for (int j=0; j<n; j++)		//las t primeras columnas quedan en 0
		{
			k = j*m;
			for(int i=0; i<t; i++)
			{
				padd[i+k] =0;	
			}
		}

		for (int i=(m*n-m*t); i<(m*n); i++) //las t ultimas filas quedan en 0
		{
			padd[i] = 0;
		}

		k = 0;
		for (int j=0; j<n; j++)		//las t ultimas columnas quedan en 0
		{
			k = j*m;
			for(int i=m-t; i<m; i++)
			{
				padd[i+k] = 0;
			}
		}

		k = 0;
		for (int i=0; i<m*n; i++)	//Se excribe la imagen solo sobre elementos distintos de 0
		{
			if(padd[i]==255)
			{
				padd[i] = img[k];
				k++;
			}
			if (k == SIZE1)		//Se escribe hasta que se recorra toda la imagen
			{
				break;
			}
		}
	}

	/*Padding 16 bits*/
	void padd_zero_B(int m, int n, int d, unsigned short *padd, unsigned short *img)
	{
		int t = (d-1)/2;
		for(int i=0; i<(m*n); i++)
		{
			padd[i]=255;
		}

		for (int i=0; i<(m*t); i++)
		{
			padd[i] = 0;
		}

		int k = 0;
		for (int j=0; j<n; j++)
		{
			k = j*m;
			for(int i=0; i<t; i++)
			{
				padd[i+k] =0;	
			}
		}

		for (int i=(m*n-m*t); i<(m*n); i++)
		{
			padd[i] = 0;
		}

		k = 0;
		for (int j=0; j<n; j++)
		{
			k = j*m;
			for(int i=m-t; i<m; i++)
			{
				padd[i+k] = 0;
			}
		}

		k = 0;
		for (int i=0; i<m*n; i++)
		{
			if(padd[i]==255)
			{
				padd[i] = img[k];
				k++;
			}
			if (k == SIZE2)
			{
				break;
			}
		}
	}
	
	/*Filtro pasa bajo 8 bits*/
	void f_lowpass(int m, int n, int d, unsigned char *padd, unsigned char * img_f)
	{
		int a = (d-1)/2;
		int k_m = 0;
		for(int t = a; t<(n-a); t++)	//Va saltando filas hasta la n-ésima
		{
			int c = t*m;
			for(int k=a+c; k<(m-a+c); k++)		//Va recorriendo la fila cuyo indice es t
			{
				short aux = 0;
				for(int i=-a; i<=a; i++)	//Permite recorrer el filtro por filas
				{
					for(int j=(-a*m); j<=(a*m); j+=m)	//Permite recorrer el filtro por columnas
					{
						aux = aux + padd[k+j+i];
					}
				}
				aux = aux/(d*d);
				img_f[k_m] = (unsigned char)aux;
				k_m++;
			}
		}
	}

	void f_lowpass_B(int m, int n, int d, unsigned short *padd, unsigned short * img_f)
	{
		int a = (d-1)/2;
		int k_m = 0;
		for(int t = a; t<(n-a); t++)	//Va saltando filas hasta la n-ésima
		{
			int c = t*m;
			for(int k=a+c; k<(m-a+c); k++)		//Va recorriendo la fila cuyo indice es t
			{
				int aux = 0;
				for(int i=-a; i<=a; i++)	//Permite recorrer el filtro por filas
				{
					for(int j=(-a*m); j<=(a*m); j+=m)	//Permite recorrer el filtro por columnas
					{
						aux = aux + padd[k+j+i];
					}
				}
				aux = aux/(d*d);
				img_f[k_m] = (unsigned short)aux;
				k_m++;
			}
		}
	}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/*Aplicando funciones*/
		/*Imagen A*/
	for (int i=0; i<SIZE1; i++)	//Me aseguro que no haya nada en memoria
	{
		bufA3_out[i] = 0;
	}
	for (int i=0; i<SIZE1; i++)
	{
		bufA5_out[i] = 0;
	}
	for (int i=0; i<SIZE1; i++)
	{
		bufA7_out[i] = 0;
	}
		/*Filtro 3x3*/
	padd_zero(183, 219, 3,b_padd_3, bufA); 
	f_lowpass(183, 219, 3, b_padd_3, bufA3_out);
		/*Filtro 5x5*/
	padd_zero(185, 221, 5, b_padd_5, bufA); 
	f_lowpass(185, 221, 5, b_padd_5, bufA5_out);
		/*Filtro 7x7*/
	padd_zero(187, 223, 7, b_padd_7, bufA); 
	f_lowpass(187, 223, 7, b_padd_7, bufA7_out);


		/*Imagen B*/
	for (int i=0; i<SIZE1; i++)	//Me aseguro que no haya nada en memoria
	{
		bufB3_out[i] = 0;
	}
	for (int i=0; i<SIZE1; i++)
	{
		bufB5_out[i] = 0;
	}
	for (int i=0; i<SIZE1; i++)
	{
		bufB7_out[i] = 0;
	}

		/*Filtro 3x3*/
	padd_zero(183, 219, 3, b_padd_3, bufB); 
	f_lowpass(183, 219, 3, b_padd_3, bufB3_out);
		/*Filtro 5x5*/
	padd_zero(185, 221, 5, b_padd_5, bufB); 
	f_lowpass(185, 221, 5, b_padd_5, bufB5_out);
		/*Filtro 7x7*/
	padd_zero(187, 223, 7, b_padd_7, bufB); 
	f_lowpass(187, 223, 7, b_padd_7, bufB7_out);

		/*Imagen D*/
	for (int i=0; i<SIZE2; i++)	//Me aseguro que no haya nada en memoria
	{
		bufD3_out[i] = 0;
	}
	for (int i=0; i<SIZE2; i++)
	{
		bufD5_out[i] = 0;
	}
	for (int i=0; i<SIZE2; i++)
	{
		bufD7_out[i] = 0;
	}

		/*Filtro 3x3*/
	padd_zero_B(514, 514, 3, B_padd_3, bufD);
	f_lowpass_B(514, 514, 3, B_padd_3, bufD3_out);
		/*Filtro 5x5*/
	padd_zero_B(516, 516, 5, B_padd_5, bufD);
	f_lowpass_B(516, 516, 5, B_padd_5, bufD5_out);
		/*Filtro 7x7*/
	padd_zero_B(518, 518, 7, B_padd_7, bufD);
	f_lowpass_B(518, 518, 7, B_padd_7, bufD7_out);



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/*Abrir archivos de salida*/
	/*Imagen A*/
	if((fpA3_out = fopen("imgA_lp_3.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}

	if((fpA5_out = fopen("imgA_lp_5.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}

	if((fpA7_out = fopen("imgA_lp_7.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}


	/*Imagen B*/
	if((fpB3_out = fopen("imgB_lp_3.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}

	if((fpB5_out = fopen("imgB_lp_5.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}

	if((fpB7_out = fopen("imgB_lp_7.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}


	/*Imagen D*/
	if((fpD3_out = fopen("imgD_lp_3.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}

	if((fpD5_out = fopen("imgD_lp_5.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}

	if((fpD7_out = fopen("imgD_lp_7.raw","wb")) == NULL)
	{
		fprintf(stderr,"ERROR: can't open file C\n");
		exit(1);
	}



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/*Escribir archivo de salida*/
	/*Imagen A*/
	if((fwrite(bufA3_out, sizeof(char), SIZE1, fpA3_out) != SIZE1))
	{
		fprintf(stderr,"ERROR: can't write file C\n");
		exit(1);
	}
	fclose(fpA3_out);

	if((fwrite(bufA5_out, sizeof(char), SIZE1, fpA5_out) != SIZE1))
	{
		fprintf(stderr,"ERROR: can't write file C\n");
		exit(1);
	}
	fclose(fpA5_out);

	if((fwrite(bufA7_out, sizeof(char), SIZE1, fpA7_out) != SIZE1))
	{
		fprintf(stderr,"ERROR: can't write file C\n");
		exit(1);
	}
	fclose(fpA7_out);


	/*Imagen B*/
	if((fwrite(bufB3_out, sizeof(char), SIZE1, fpB3_out) != SIZE1))
	{
		fprintf(stderr,"ERROR: can't write file C\n");
		exit(1);
	}
	fclose(fpB3_out);

	if((fwrite(bufB5_out, sizeof(char), SIZE1, fpB5_out) != SIZE1))
	{
		fprintf(stderr,"ERROR: can't write file C\n");
		exit(1);
	}
	fclose(fpB5_out);

	if((fwrite(bufB7_out, sizeof(char), SIZE1, fpB7_out) != SIZE1))
	{
		fprintf(stderr,"ERROR: can't write file C\n");
		exit(1);
	}
	fclose(fpB7_out);

	/*Imagen D*/
	if((fwrite(bufD3_out, sizeof(short), SIZE2, fpD3_out) != SIZE2))
	{
		fprintf(stderr,"ERROR: can't write file D1\n");
		exit(1);
	}
	fclose(fpD3_out);

	if((fwrite(bufD5_out, sizeof(short), SIZE2, fpD5_out) != SIZE2))
	{
		fprintf(stderr,"ERROR: can't write file D2\n");
		exit(1);
	}
	fclose(fpD5_out);

	if((fwrite(bufD7_out, sizeof(short), SIZE2, fpD7_out) != SIZE2))
	{
		fprintf(stderr,"ERROR: can't write file D3\n");
		exit(1);
	}
	fclose(fpD7_out);
